generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(uuid())
  name          String?
  username      String?       @unique
  email         String?       @unique
  emailVerified DateTime?
  avatarUrl     String?
  role          Role?         @default(USER)
  createdAt     DateTime      @default(now())
  telephone     String?
  passwordHash  String?
  googleId      String?       @unique
  bio           String?
  isWelcomed    Boolean       @default(false)
  sessions      Session[]
  pupils        Pupil[]
  staffs        Staff[]
  feesPayments   FeesPayment[]

  @@map("users")
}

model Pupil {
  id              String       @id @default(uuid())
  user            User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String?
  classStream     classStream? @relation(fields: [classStreamId], references: [id])
  classStreamId   String?
  fees            Fees[]
  genericPassword String

  @@map("pupils")
}

model Staff {
  id              String        @id @default(uuid())
  user            User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  staffType       StaffType     @default(TEACHING_STAFF)
  userId          String?
  classStreams    classStream[]
  genericPassword String

  @@map("staffs")
}

enum StaffType {
  TEACHING_STAFF
  NON_TEACHING_STAFF
}

model Level {
  id      String  @id @default(uuid())
  name    String
  slug    String
  classes Class[]

  @@map("levels")
}

model Stream {
  id           String        @id @default(uuid())
  name         String
  classStreams classStream[]

  @@map("streams")
}

model Class {
  id                  String              @id @default(uuid())
  name                String
  level               Level?              @relation(fields: [levelId], references: [id])
  levelId             String?
  academicYearClasses AcademicYearClass[]
  createdAt           DateTime            @default(now())

  @@map("classes")
}

model AcademicYear {
  id                  String              @id @default(uuid())
  year                String
  academicYearClasses AcademicYearClass[]
  startAt             DateTime            @default(now())
  endAt               DateTime

  @@map("academic_years")
}

model AcademicYearClass {
  id             String        @id @default(uuid())
  class          Class?        @relation(fields: [classId], references: [id], onDelete: Cascade)
  academicYear   AcademicYear? @relation(fields: [academicYearId], references: [id], onDelete: Cascade)
  academicYearId String?
  streams        classStream[]
  classId        String?

  @@unique([classId, academicYearId])
  @@map("academic_year_classes")
}

model classStream {
  id           String             @id @default(uuid())
  stream       Stream?            @relation(fields: [streamId], references: [id], onDelete: Cascade)
  classTeacher Staff?             @relation(fields: [staffId], references: [id], onDelete: SetNull)
  pupils       Pupil[]
  terms        ClassTerm[]
  staffId      String?
  class        AcademicYearClass? @relation(fields: [classId], references: [id], onDelete: Cascade)
  classId      String?
  streamId     String?

  @@unique([classId, streamId])
  @@map("class_streams")
}

model Term {
  id         String      @id @default(uuid())
  term       String      @unique
  slug       String      @unique
  classTerms ClassTerm[]

  @@map("terms")
}

model ClassTerm {
  id            String       @id @default(uuid())
  classStream   classStream? @relation(fields: [classStreamId], references: [id], onDelete: Cascade)
  classStreamId String?
  term          Term?        @relation(fields: [termId], references: [id], onDelete: Cascade)
  startAt       DateTime     @default(now())
  endAt         DateTime
  fees          Fees[]
  termId        String?
  feesAmount    Int?

  @@unique([classStreamId, termId])
  @@map("class_terms")
}

model Fees {
  id           String        @id @default(uuid())
  pupil        Pupil         @relation(fields: [pupilId], references: [id], onDelete: Cascade)
  pupilId      String
  balance      Int           @default(0)
  status       FeesStatus    @default(NILL)
  feesPayments FeesPayment[]
  term         ClassTerm     @relation(fields: [termId], references: [id], onDelete: Cascade)
  termId       String

  @@map("fees")
}

enum FeesStatus {
  COMPLETED
  PENDING
  NILL
}

model FeesPayment {
  id         String   @id @default(uuid())
  amountPaid Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  fees       Fees?    @relation(fields: [feesId], references: [id], onDelete: Cascade)
  feesId     String?
  paidBy     User     @relation(fields: [userId], references: [id])
  userId     String

  @@map("fees_payments")
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  expiresAt DateTime
  role      Role     @default(USER)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum Role {
  DIRECTOR
  BURSAR
  ASSET_CARETAKER
  CLASS_TEACHER
  USER
  SUPER_ADMIN
}
