generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(uuid())
  name          String?
  username      String?       @unique
  email         String?       @unique
  emailVerified DateTime?
  avatarUrl     String?
  role          Role?         @default(USER)
  createdAt     DateTime      @default(now())
  telephone     String?
  passwordHash  String?
  googleId      String?       @unique
  bio           String?
  isWelcomed    Boolean       @default(false)
  sessions      Session[]
  pupils        Pupil[]
  staffs        Staff[]
  feesPayments  FeesPayment[]
  borrowers     Borrower[]
  assetDamages  AssetDamage[]

  @@map("users")
}

model Pupil {
  id              String       @id @default(uuid())
  user            User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String?
  classStream     classStream? @relation(fields: [classStreamId], references: [id])
  classStreamId   String?
  fees            Fees[]
  genericPassword String

  @@map("pupils")
}

model Staff {
  id              String        @id @default(uuid())
  user            User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  staffType       StaffType     @default(TEACHING_STAFF)
  userId          String?
  classStreams    classStream[]
  genericPassword String

  @@map("staffs")
}

enum StaffType {
  TEACHING_STAFF
  NON_TEACHING_STAFF
}

model Level {
  id      String  @id @default(uuid())
  name    String
  slug    String
  classes Class[]

  @@map("levels")
}

model Stream {
  id           String        @id @default(uuid())
  name         String
  classStreams classStream[]

  @@map("streams")
}

model Class {
  id                  String              @id @default(uuid())
  name                String
  level               Level?              @relation(fields: [levelId], references: [id])
  levelId             String?
  academicYearClasses AcademicYearClass[]
  createdAt           DateTime            @default(now())

  @@map("classes")
}

model AcademicYear {
  id                  String              @id @default(uuid())
  year                String
  academicYearClasses AcademicYearClass[]
  startAt             DateTime            @default(now())
  endAt               DateTime

  @@map("academic_years")
}

model AcademicYearClass {
  id             String        @id @default(uuid())
  class          Class?        @relation(fields: [classId], references: [id], onDelete: Cascade)
  academicYear   AcademicYear? @relation(fields: [academicYearId], references: [id], onDelete: Cascade)
  academicYearId String?
  streams        classStream[]
  classId        String?

  @@unique([classId, academicYearId])
  @@map("academic_year_classes")
}

model classStream {
  id           String             @id @default(uuid())
  stream       Stream?            @relation(fields: [streamId], references: [id], onDelete: Cascade)
  classTeacher Staff?             @relation(fields: [staffId], references: [id], onDelete: SetNull)
  pupils       Pupil[]
  terms        ClassTerm[]
  staffId      String?
  class        AcademicYearClass? @relation(fields: [classId], references: [id], onDelete: Cascade)
  classId      String?
  streamId     String?

  @@unique([classId, streamId])
  @@map("class_streams")
}

model Term {
  id         String      @id @default(uuid())
  term       String      @unique
  slug       String      @unique
  classTerms ClassTerm[]

  @@map("terms")
}

model ClassTerm {
  id            String       @id @default(uuid())
  classStream   classStream? @relation(fields: [classStreamId], references: [id], onDelete: Cascade)
  classStreamId String?
  term          Term?        @relation(fields: [termId], references: [id], onDelete: Cascade)
  startAt       DateTime     @default(now())
  endAt         DateTime
  fees          Fees[]
  termId        String?
  feesAmount    Int?

  @@unique([classStreamId, termId])
  @@map("class_terms")
}

model Fees {
  id           String        @id @default(uuid())
  pupil        Pupil         @relation(fields: [pupilId], references: [id], onDelete: Cascade)
  pupilId      String
  balance      Int           @default(0)
  status       FeesStatus    @default(NILL)
  feesPayments FeesPayment[]
  term         ClassTerm     @relation(fields: [termId], references: [id], onDelete: Cascade)
  termId       String

  @@map("fees")
}

enum FeesStatus {
  COMPLETED
  PENDING
  NILL
}

model FeesPayment {
  id         String   @id @default(uuid())
  amountPaid Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  fees       Fees?    @relation(fields: [feesId], references: [id], onDelete: Cascade)
  feesId     String?
  paidBy     User     @relation(fields: [userId], references: [id])
  userId     String

  @@map("fees_payments")
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  expiresAt DateTime
  role      Role     @default(USER)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum Role {
  DIRECTOR
  BURSAR
  ASSET_CARETAKER
  CLASS_TEACHER
  USER
  SUPER_ADMIN
}

model Asset {
  id                String             @id @default(uuid())
  name              String
  description       String?
  category          AssetCategory
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  foodStoreItems    FoodStoreItem[]
  libraryBooks      LibraryBook[]
  labItems          LabItem[]
  computerLabItems  ComputerLabItem[]
  generalStoreItems GeneralStoreItem[]

  @@map("assets")
}

enum AssetCategory {
  LIBRARY
  COMPUTER_LAB
  LABORATORY
  GENERAL_STORE
  FOOD_STORE
}

enum AssetCondition {
  NEW
  GOOD
  FAIR
  POOR
  DAMAGED
}

enum AssetStatus {
  AVAILABLE
  ASSIGNED
  UNDER_MAINTENANCE
  DISPOSED
}

model FoodStoreItem {
  id            String            @id @default(uuid())
  asset         Asset             @relation(fields: [assetId], references: [id], onDelete: Cascade)
  assetId       String
  foodName      String
  quantity      Float?
  trackQuantity Boolean           @default(false)
  unit          AssetUnit
  status        AssetItemStatus   @default(AVAILABLE)
  consumptions  FoodConsumption[]
  supplier      Supplier?         @relation(fields: [supplierId], references: [id], onDelete: SetNull)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  supplierId    String?

  @@map("food_store_items")
}

enum AssetUnit {
  KILOGRAM
  GRAMS
  PACKETS
  SAC
  LITER
  PIECE
  PAIR
  JERRICAN
  CONTAINER
  OTHERS
}

model FoodConsumption {
  id              String        @id @default(uuid())
  foodItem        FoodStoreItem @relation(fields: [foodStoreItemId], references: [id], onDelete: Cascade)
  quantityUsed    Float? //Quantity consumed
  dateUsedAt      DateTime      @default(now())
  usageDetails    String? //Details (e.g., "Cooked for lunch")
  foodStoreItemId String

  @@map("food_consumptions")
}

model Supplier {
  id             String          @id @default(uuid())
  name           String
  contactInfo    String?
  address        String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  foodStoreItems FoodStoreItem[]

  @@map("suppliers")
}

model LibraryBook {
  id                    String              @id @default(uuid())
  asset                 Asset               @relation(fields: [assetId], references: [id], onDelete: Cascade)
  title                 String
  author                String
  category              LibraryBookCategory @relation(fields: [libraryBookCategoryId], references: [id], onDelete: Cascade)
  isbn                  String? // Optional ISBN
  borrowers             Borrower[]
  status                BookStatus          @default(AVAILABLE)
  bookDamages           LibraryBookDamage[]
  assetId               String
  libraryBookCategoryId String

  @@map("library_books")
}

model LibraryBookCategory {
  id           String        @id @default(uuid())
  category     String // e.g., "Science", "History"
  description  String?
  libraryBooks LibraryBook[]

  @@map("library_book_category")
}

model Borrower {
  id                 String              @id @default(uuid())
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  borrowedAt         DateTime            @default(now())
  returnAt           DateTime?
  status             BorrowStatus        @default(ONGOING)
  libraryBook        LibraryBook?        @relation(fields: [libraryBookId], references: [id], onDelete: SetNull)
  libraryBookId      String?
  userId             String
  libraryBookDamages LibraryBookDamage[]

  @@map("borrowers")
}

enum BorrowStatus {
  ONGOING
  RETURNED
}

enum BookStatus {
  AVAILABLE
  BORROWED
  DAMAGED
}

model LibraryBookDamage {
  id            String       @id @default(uuid())
  damagedBy     Borrower     @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
  damageDetails String
  libraryBook   LibraryBook? @relation(fields: [libraryBookId], references: [id], onDelete: Cascade)
  libraryBookId String?
  borrowerId    String

  @@map("library_book_damages")
}

model LabItem {
  id            String          @id @default(uuid())
  asset         Asset           @relation(fields: [assetId], references: [id], onDelete: Cascade)
  name          String // e.g., Test tubes, Chemicals
  quantity      Float? // Quantity in stock
  trackQuantity Boolean         @default(false)
  damages       AssetDamage[]
  unit          AssetUnit
  status        AssetItemStatus @default(AVAILABLE)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  assetId       String

  @@map("lab_items")
}

enum AssetItemStatus {
  AVAILABLE
  IN_USE
  EXPIRED
}

model ComputerLabItem {
  id            String         @id @default(uuid())
  asset         Asset          @relation(fields: [assetId], references: [id], onDelete: Cascade)
  name          String // e.g., Keyboard, Mouse, AC
  model         String?
  specification String?
  quantity      Float?
  condition     AssetCondition @default(NEW)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  assetId       String

  @@map("computer_lab_items")
}

model GeneralStoreItem {
  id            String          @id @default(uuid())
  asset         Asset           @relation(fields: [assetId], references: [id], onDelete: Cascade)
  name          String // e.g., Chairs, Desks
  quantity      Float?
  unit          AssetUnit
  trackQuantity Boolean         @default(false)
  status        AssetItemStatus @default(AVAILABLE)
  damages       AssetDamage[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  assetId       String

  @@map("general_store_items")
}

model AssetDamage {
  id                 String            @id @default(uuid())
  damagedBy          User              @relation(fields: [userId], references: [id])
  damageDetails      String
  condition          AssetCondition
  quantity           Int
  userId             String
  generalStoreItem   GeneralStoreItem? @relation(fields: [generalStoreItemId], references: [id])
  generalStoreItemId String?
  labItem            LabItem?          @relation(fields: [labItemId], references: [id])
  labItemId          String?

  @@map("asset_damages")
}
