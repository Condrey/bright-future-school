generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(uuid())
  name          String?
  username      String?       @unique
  email         String?       @unique
  emailVerified DateTime?
  avatarUrl     String?
  role          Role?         @default(USER)
  createdAt     DateTime      @default(now())
  telephone     String?
  passwordHash  String?
  googleId      String?       @unique
  bio           String?
  isWelcomed    Boolean       @default(false)
  assetDamages  AssetDamage[]
  borrowers     Borrower[]
  feesPayments  FeesPayment[]
  pupils        Pupil[]
  sessions      Session[]
  staffs        Staff[]

  @@map("users")
}

model Pupil {
  id              String       @id @default(uuid())
  userId          String?
  classStreamId   String?
  genericPassword String
  fees            Fees[]
  classStream     classStream? @relation(fields: [classStreamId], references: [id])
  user            User?        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("pupils")
}

model Staff {
  id              String        @id @default(uuid())
  staffType       StaffType     @default(TEACHING_STAFF)
  userId          String?
  genericPassword String
  classStreams    classStream[]
  user            User?         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("staffs")
}

model Level {
  id      String  @id @default(uuid())
  name    String
  slug    String
  classes Class[]

  @@map("levels")
}

model Stream {
  id           String        @id @default(uuid())
  name         String
  classStreams classStream[]

  @@map("streams")
}

model Class {
  id                  String              @id @default(uuid())
  name                String
  levelId             String?
  createdAt           DateTime            @default(now())
  academicYearClasses AcademicYearClass[]
  level               Level?              @relation(fields: [levelId], references: [id])

  @@map("classes")
}

model AcademicYear {
  id                  String              @id @default(uuid())
  year                String
  startAt             DateTime            @default(now())
  endAt               DateTime
  academicYearClasses AcademicYearClass[]

  @@map("academic_years")
}

model AcademicYearClass {
  id             String        @id @default(uuid())
  academicYearId String?
  classId        String?
  academicYear   AcademicYear? @relation(fields: [academicYearId], references: [id], onDelete: Cascade)
  class          Class?        @relation(fields: [classId], references: [id], onDelete: Cascade)
  streams        classStream[]

  @@unique([classId, academicYearId])
  @@map("academic_year_classes")
}

model classStream {
  id           String             @id @default(uuid())
  staffId      String?
  classId      String?
  streamId     String?
  class        AcademicYearClass? @relation(fields: [classId], references: [id], onDelete: Cascade)
  classTeacher Staff?             @relation(fields: [staffId], references: [id])
  stream       Stream?            @relation(fields: [streamId], references: [id], onDelete: Cascade)
  terms        ClassTerm[]
  pupils       Pupil[]

  @@unique([classId, streamId])
  @@map("class_streams")
}

model Term {
  id         String      @id @default(uuid())
  term       String      @unique
  slug       String      @unique
  classTerms ClassTerm[]

  @@map("terms")
}

model ClassTerm {
  id            String       @id @default(uuid())
  startAt       DateTime     @default(now())
  endAt         DateTime
  termId        String?
  classStreamId String?
  feesAmount    Int?
  classStream   classStream? @relation(fields: [classStreamId], references: [id], onDelete: Cascade)
  term          Term?        @relation(fields: [termId], references: [id], onDelete: Cascade)
  fees          Fees[]

  @@unique([classStreamId, termId])
  @@map("class_terms")
}

model Fees {
  id           String        @id @default(uuid())
  pupilId      String
  balance      Int           @default(0)
  termId       String
  status       FeesStatus    @default(NILL)
  pupil        Pupil         @relation(fields: [pupilId], references: [id], onDelete: Cascade)
  term         ClassTerm     @relation(fields: [termId], references: [id], onDelete: Cascade)
  feesPayments FeesPayment[]

  @@map("fees")
}

model FeesPayment {
  id         String   @id @default(uuid())
  amountPaid Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  feesId     String?
  userId     String
  fees       Fees?    @relation(fields: [feesId], references: [id], onDelete: Cascade)
  paidBy     User     @relation(fields: [userId], references: [id])

  @@map("fees_payments")
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  expiresAt DateTime
  role      Role     @default(USER)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Asset {
  id                String             @id @default(uuid())
  name              String
  description       String?
  category          AssetCategory
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  computerLabItems  ComputerLabItem[]
  foodStoreItems    FoodStoreItem[]
  generalStoreItems GeneralStoreItem[]
  labItems          LabItem[]
  libraryBooks      LibraryBook[]

  @@map("assets")
}

model FoodStoreItem {
  id            String            @id @default(uuid())
  assetId       String
  foodName      String
  unit          AssetUnit
  quantity      Float?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  supplierId    String?
  trackQuantity Boolean           @default(false)
  status        AssetItemStatus   @default(AVAILABLE)
  consumptions  FoodConsumption[]
  asset         Asset             @relation(fields: [assetId], references: [id], onDelete: Cascade)
  supplier      Supplier?         @relation(fields: [supplierId], references: [id])

  @@map("food_store_items")
}

model FoodConsumption {
  id              String        @id @default(uuid())
  quantityUsed    Float?
  dateUsedAt      DateTime      @default(now())
  usageDetails    String?
  foodStoreItemId String
  foodItem        FoodStoreItem @relation(fields: [foodStoreItemId], references: [id], onDelete: Cascade)

  @@map("food_consumptions")
}

model Supplier {
  id             String          @id @default(uuid())
  name           String
  contactInfo    String?
  address        String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  foodStoreItems FoodStoreItem[]

  @@map("suppliers")
}

model LibraryBook {
  id                    String              @id @default(uuid())
  title                 String
  author                String
  assetId               String
  libraryBookCategoryId String
  quantity              Float?
  trackQuantity         Boolean             @default(false)
  unit                  AssetUnit
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  individualBooks       IndividualBook[]
  asset                 Asset               @relation(fields: [assetId], references: [id], onDelete: Cascade)
  category              LibraryBookCategory @relation(fields: [libraryBookCategoryId], references: [id], onDelete: Cascade)

  @@unique([title, author])
  @@map("library_books")
}

model IndividualBook {
  id            String              @id @default(uuid())
  isbn          String?
  status        BookStatus          @default(AVAILABLE)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  libraryBookId String
  borrowers     Borrower[]
  libraryBook   LibraryBook         @relation(fields: [libraryBookId], references: [id], onDelete: Cascade)
  bookDamages   LibraryBookDamage[]

  @@map("individual_books")
}

model LibraryBookCategory {
  id           String        @id @default(uuid())
  category     String
  description  String?
  libraryBooks LibraryBook[]

  @@map("library_book_category")
}

model Borrower {
  id                 String              @id @default(uuid())
  borrowedAt         DateTime            @default(now())
  returnAt           DateTime?
  status             BorrowStatus        @default(ONGOING)
  userId             String
  individualBookId   String?
  libraryBook        IndividualBook?     @relation(fields: [individualBookId], references: [id])
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  libraryBookDamages LibraryBookDamage[]

  @@map("borrowers")
}

model LibraryBookDamage {
  id               String          @id @default(uuid())
  damageDetails    String
  borrowerId       String
  individualBookId String?
  damagedBy        Borrower        @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
  libraryBook      IndividualBook? @relation(fields: [individualBookId], references: [id], onDelete: Cascade)

  @@map("library_book_damages")
}

model LabItem {
  id            String          @id @default(uuid())
  name          String
  quantity      Float?
  unit          AssetUnit
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  assetId       String
  trackQuantity Boolean         @default(false)
  status        AssetItemStatus @default(AVAILABLE)
  damages       AssetDamage[]
  asset         Asset           @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@map("lab_items")
}

model ComputerLabItem {
  id                         String                      @id @default(uuid())
  name                       String
  model                      String?
  specification              String?
  quantity                   Float?
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime                    @updatedAt
  assetId                    String
  trackQuantity              Boolean                     @default(false)
  unit                       AssetUnit
  individualComputerLabItems IndividualComputerLabItem[]
  asset                      Asset                       @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@map("computer_lab_items")
}

model IndividualComputerLabItem {
  id                String          @id @default(uuid())
  computerLabItemId String
  uniqueIdentifier  String?         @unique
  status            AssetStatus     @default(AVAILABLE)
  condition         AssetCondition  @default(NEW)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  assetDamages      AssetDamage[]
  computerLabItem   ComputerLabItem @relation(fields: [computerLabItemId], references: [id], onDelete: Cascade)
}

model GeneralStoreItem {
  id            String          @id @default(uuid())
  name          String
  quantity      Float?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  assetId       String
  status        AssetItemStatus @default(AVAILABLE)
  trackQuantity Boolean         @default(false)
  unit          AssetUnit
  damages       AssetDamage[]
  asset         Asset           @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@map("general_store_items")
}

model AssetDamage {
  id                          String                     @id @default(uuid())
  damageDetails               String
  condition                   AssetCondition
  quantity                    Int
  isRepaired                  Boolean                    @default(false)
  repairedAt                  DateTime?
  userId                      String
  generalStoreItemId          String?
  labItemId                   String?
  generalStoreItem            GeneralStoreItem?          @relation(fields: [generalStoreItemId], references: [id])
  labItem                     LabItem?                   @relation(fields: [labItemId], references: [id])
  damagedBy                   User                       @relation(fields: [userId], references: [id])
  individualComputerLabItem   IndividualComputerLabItem? @relation(fields: [individualComputerLabItemId], references: [id])
  individualComputerLabItemId String?
  createdAt                   DateTime                   @default(now())

  @@map("asset_damages")
}

enum StaffType {
  TEACHING_STAFF
  NON_TEACHING_STAFF
}

enum FeesStatus {
  COMPLETED
  PENDING
  NILL
}

enum Role {
  DIRECTOR
  BURSAR
  ASSET_CARETAKER
  CLASS_TEACHER
  USER
  SUPER_ADMIN
}

enum AssetCategory {
  LIBRARY
  COMPUTER_LAB
  LABORATORY
  GENERAL_STORE
  FOOD_STORE
}

enum AssetCondition {
  NEW
  GOOD
  FAIR
  POOR
  DAMAGED
}

enum AssetStatus {
  AVAILABLE
  ASSIGNED
  UNDER_MAINTENANCE
  DISPOSED
}

enum AssetUnit {
  KILOGRAM
  GRAMS
  PACKETS
  SAC
  LITER
  PIECE
  PAIR
  JERRICAN
  CONTAINER
  OTHERS
}

enum BorrowStatus {
  ONGOING
  RETURNED
}

enum BookStatus {
  AVAILABLE
  BORROWED
  DAMAGED
}

enum AssetItemStatus {
  AVAILABLE
  IN_USE
  EXPIRED
}
